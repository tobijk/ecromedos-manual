
	<chapter>
		<title><label id="sect:generalusage"/>General Usage Instructions</title>
		<p>
			<idxterm><item>command line usage</item></idxterm>

			This chapter covers the basics of starting a new document and using the
		<tt><b>ecromedos</b></tt> command line tool to convert documents to
		representational formats, also touching on the available output options that
		allow basic control over how documents are rendered.
		</p>
		<section>
			<title>Beginning a New Document</title>
			<p>
				Starting a new document is easy and boils down to
			</p>
			<ol>
				<li>choosing a document class and</li>
				<li>generating a template, from which to continue editing.</li>
			</ol>
			<subsection>
				<title>Choosing a Document Class</title>
				<p>
					<idxterm><item>document class</item></idxterm>

					When starting a new document, you first have to choose a
				<i>document class</i> fitting the type of document you intend to write.
				Document classes are abstract definitions of typical real-world document types,
				such as <q>letter</q>, <q>book</q>, or <q>newspaper article</q>.
				</p>
				<p>
					<idxterm><item>document class</item><subitem>article</subitem></idxterm>
					<idxterm><item>document class</item><subitem>book</subitem></idxterm>
					<idxterm><item>document class</item><subitem>report</subitem></idxterm>

					The ecromedos Markup Language (ECML) provides the three document classes
				<b><tt>article</tt></b>, <b><tt>book</tt></b> and <b><tt>report</tt></b>. The
				primary difference between these is how many section levels they provide
				and how	they are rendered when generating printable output.
				</p>
				<dl>
					<dt><tt><b>article</b></tt></dt>
					<dd>
						<idxterm group="ecml"><item>article</item></idxterm>

						The article class is intended for short documents without the need for a
					glossary or keyword index. On paper, articles are rendered single-sided with an
					in-page title. Articles offer three section levels through the sectioning
					elements <tt><b>section</b></tt>, <tt><b>subsection</b></tt> and
					<tt><b>subsubsection</b></tt>.
					</dd>
					<dt><tt><b>book</b></tt></dt>
					<dd>
						<idxterm group="ecml"><item>book</item></idxterm>

						The book class is for large documents that may contain a glossary and keyword
					indexes. In print, documents are rendered double-sided with a separate title
					page. This class introduces the top-level sectioning element <tt><b>chapter</b></tt>.
					Chapters start on odd-numbered pages and may be further grouped into
					<tt><b>parts</b></tt>.
					</dd>
					<dt><tt><b>report</b></tt></dt>
					<dd>
						<idxterm group="ecml"><item>report</item></idxterm>

						A report is essentially the same as a book, but documents are rendered
					single-sided when generating printable output.
					</dd>
				</dl>
			</subsection>
			<subsection>
				<title><label id="sect:maketemplate"/>Starting from a Template</title>
				<p>
					<idxterm><item>template document</item></idxterm>

					When you have decided on which document class you want to use, the
				recommended way of starting your document is to generate a bare document template.
				In order to do so, open a terminal window and issue the following command:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; ecromedos -n <i>class</i> &gt; index.xml
				</color>
				</verbatim>
				<p>
					Where <i>class</i> should be one of <b><tt>article</tt></b>,
				<b><tt>book</tt></b>, or <b><tt>report</tt></b>. When you open the file
				<tt>index.xml</tt> in your editor, you should see something similar to the
				following listing.
				</p>
				<listing>
					<code bgcolor="#eeeeee" syntax="xml" colorscheme="ide-codewarrior"
						strip="yes"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE report SYSTEM
    "http://www.ecromedos.net/dtd/2.0/ecromedos.dtd">
<report lang="en_US" secnumdepth="3" secsplitdepth="1">
        <head>
                <subject>Subject</subject>
                <title>Title</title>
                <author>Author</author>
                <date>Date</date>
                <publisher>Publisher</publisher>
        </head>
        <make-toc depth="3" lof="no" lot="no" lol="no"/>

		...
		
        <chapter>
                <title>Chapter Title</title>
             	<p>
				First paragraph in first chapter...
                </p>
        </chapter>

		...

</report>
					]]></code>
				</listing>
				<p>
					Even if you are not yet familiar with the ecromedos Markup Language, you
				should be able to interpret the general structure of the markup. For now, you
				don't need to know the details. You will dive more deeply into document	writing
				in chapter <ref idref="sect:writingdocuments"/>.
				</p>
			</subsection>
		</section>
		<section>
			<title>Compiling Documents</title>
			<p>
				<idxterm><item>compiling documents</item></idxterm>

				In order to convert your documents from ecromedos Markup Language to one of
			the supported output formats, you have to call the ecromedos Document Processor
			from the command line. The exact procedures are explained in the following
			subsections.
			</p>
			<subsection>
				<title>Producing XHTML Output</title>
				<p>
					<idxterm><item>output formats</item></idxterm>
					<idxterm><item>output formats</item><subitem>XHTML</subitem></idxterm>

					XHTML is the default output format, unless you modified the corresponding
				setting in the configuration file. In the default installation, to convert a
				document from ECML to XHTML, you simply have to issue the following	command:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; ecromedos <i>document</i>
				</color>
				</verbatim>
				<p>
 					<idxterm><item>working directory</item></idxterm>

					where <i>document</i> is the name of an ECML input file. The output files
				will be placed into the working directory of the <tt>ecromedos</tt> command. If
				you don't want the output in the same directory as the source files, simply
				create an empty folder, change into it,	and call ecromedos from there:
 				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; mkdir spool
$&gt; cd spool
$&gt; ecromedos ../<i>document</i>
				</color>
				</verbatim>
				<p>
					ecromedos will copy all resources required for viewing the document to
				the output folder and, in the case of HTML output, adjust the references
				inside the transformed document accordingly. This means that even though
				you can share images, such as logos, between source documents, each
				representational instance of a document will be completely self-contained.
				</p>
				<p>
					After transformation, load the file <tt>index.html</tt> into your web
				browser, to view the results.
				</p>
			</subsection>
			<subsection>
				<title>Producing Postscript and PDF</title>
				<p>
					<idxterm><item>output formats</item><subitem>PostScript and PDF</subitem></idxterm>

					If you want to produce a Postscript or PDF version of your document, you
				will have to generate &latex; output first. Use the <tt><b>-f</b></tt> command
				line switch to tell ecromedos the desired target format:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; ecromedos -f latex <i>document</i>
				</color>
				</verbatim>
				<p>
					<idxterm group="ecml"><item>article</item><subitem>secsplitdepth</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>secsplitdepth</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>secsplitdepth</subitem></idxterm>

					Depending on your setting of <tt><b>secsplitdepth</b></tt> (see section
				<ref idref="sect:outputchunking"/>), you will obtain one or more output files
				with the extension <i>tex</i>. The main &tex;-file will carry the name of the
				document class you are using. To compile the &latex; sources of your document,
				invoke the &latex; compiler like this:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; latex <i>class</i>.tex
				</color>
				</verbatim>
				<p>
					<idxterm><item>cross-references</item></idxterm>

					You may have to call &latex; two or three times until all cross-references
				are resolved and the table of contents is completely built. The	result will be a
				file with the extension <i>dvi</i>. You can use the following commands to
				convert the DVI	file to PostScript and PDF:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; dvips -Ppdf <i>class</i>.dvi
$&gt; ps2pdf <i>class</i>.ps
				</color>
				</verbatim>
				<p>
					<idxterm><item>output formats</item><subitem>DVI</subitem></idxterm>
					<idxterm><item>pdftex</item></idxterm>

					The first command will generate Postscript output from the DVI file and the
				second command will turn the Postscript into PDF. Starting with ecromedos 2.0.0,
				you can take advantage of the fact that &tex; can produce PDF directly through
				the <i>pdftex</i> driver. So instead of taking the detour over an intermediate
				Postscript file, you can instruct ecromedos to produce output that can be
				compiled with the <tt>pdflatex</tt> command:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; ecromedos -f pdflatex <i>document</i>
$&gt; pdflatex <i>class</i>.tex
				</color>
				</verbatim>
				<p>
					In addition, there is some preliminary support for generating output that can
				be processed with the unicode-aware &xetex; using the <tt>xelatex</tt> command:
				</p>
				<verbatim strip="yes"><color rgb="#000088">
$&gt; ecromedos -f xelatex <i>document</i>
$&gt; xelatex <i>class</i>.tex
				</color>
				</verbatim>
				<p>
					And again, remember that you may have to call &latex; multiple times before
				the document is rendered complete.
				</p>
			</subsection>
		</section>
		<section>
			<title>Output Options</title>
			<p>
				<idxterm><item>output options</item></idxterm>
				<idxterm><item>semantic markup</item></idxterm>

				Even though we are dealing with semantic markup, there are some decisions
			about the presentation of a document that are left to the author, such as
			whether the document should have a table of contents or not, whether sections
			are to be numbered and if so, down to which section level, and so on. The
			language elements and element attributes that are described below, give you some
			limited control over these presentational aspects.
			</p>
			<subsection>
				<title>Specifying the Document's Language<label id="sect:doclang"/></title>
				<p>
					<idxterm group="ecml"><item>article</item><subitem>lang</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>lang</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>lang</subitem></idxterm>

					 By setting the <tt><b>lang</b></tt> attribute on the document's root 
				element you can select the language to be used for automatic titles, i.e.
				section titles that are generated by the document processor automatically, such
				as <qq>table of contents</qq> or <qq>bibliography</qq>. When generating &latex;
				output, this also activates the hyphenation patterns for the specified language.
				</p>
				<p>
					In ecromedos version 1 you could simply supply the english name of the
				desired language such as <tt>german</tt> or <tt>english</tt>. Starting with
				version	2, you have to supply an ISO locale identifier such as <tt>en_US</tt>.
				This is to better take into consideration regional differences. For example,
				there are countries that speak the same language but use different scripts.
				</p>
				<p>
					<idxterm><item>document</item><subitem>language</subitem></idxterm>

					Currently, ecromedos supports the following language/territory combinations:
				</p>
				<table print-width="60%" screen-width="600px" align="left"
					frame="top,bottom">
					<colgroup>
						<col width="33%"/>
						<col width="34%"/>
						<col width="33%"/>
					</colgroup>
					<th frame="rowsep">
						<td><b>Language  </b></td>
						<td><b>Territory </b></td>
						<td><b>Identifier</b></td>
					</th>
					<tr><td>English</td><td>Canada       </td><td>en_CA</td></tr>
					<tr><td>       </td><td>Great Britain</td><td>en_GB</td></tr>
					<tr><td>       </td><td>New Zealand  </td><td>en_NZ</td></tr>
					<tr frame="rowsep"><td>       </td><td>USA          </td><td>en_US</td></tr>
					<tr><td>German </td><td>Austria      </td><td>de_AU</td></tr>
					<tr><td>       </td><td>Germany      </td><td>de_DE</td></tr>
					<tr><td>       </td><td>Switzerland  </td><td>de_CH</td></tr>
				</table>
			</subsection>
			<subsection>
				<title><label id="sect:outputchunking"/>Chunking Into Multiple Files</title>
				<p>
					<idxterm group="ecml"><item>article</item><subitem>secsplitdepth</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>secsplitdepth</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>secsplitdepth</subitem></idxterm>
					<idxterm><item>splitting documents</item></idxterm>

					Set the <tt><b>secsplitdepth</b></tt> attribute on the root element of your
				document to an integer value between 0 and 5, in order to control down to which
				section level the document will be chunked into individual files. This is
				especially useful when generating HTML output. Splitting up large HTML documents
				into multiple files will improve the user experience, because the document will
				be easier to navigate, individual parts will load more quickly, and the user's
				browser doesn't have to keep the entire document in memory, at once.
				</p>
				<p>
					<idxterm group="ecml"><item>part</item></idxterm>

					Here is an example on how it works. When you write a book or report without
				making use of the <tt><b>part</b></tt> element, setting
				<tt><b>secsplitdepth</b></tt> to 1 will result in each chapter being written to
				a separate output file. The level count always starts at zero. So if, one day,
				you decide to group the chapters into parts, leaving
				<tt><b>secsplitdepth</b></tt> at 1 means that the document is now split at the
				parts' level. If you still want each chapter to go to a separate
				file, you have to increment <tt><b>secsplitdepth</b></tt> to two. If you set
				<tt><b>secsplitdepth</b></tt> to zero, the entire document will	be rendered into
				a single file.
				</p>
				<p>
					When generating HTML, the ecromedos Document Processor will	take care of
				linking the document together via a navigation menu that will appear at the top
				and bottom of each output file, providing for a seamless reading experience.
				</p>
			</subsection>
			<subsection>
				<title>Chapter and Section Numbering</title>
				<p>
					<idxterm group="ecml"><item>article</item><subitem>secnumdepth</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>secnumdepth</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>secnumdepth</subitem></idxterm>
					<idxterm><item>section numbers</item></idxterm>

					Set the <tt><b>secnumdepth</b></tt> attribute on the document's root element
				to an integer value between 0 and 5, in order to control down to which section
				level sections are to be numbered. Setting it to zero will turn section	numbers
				off completely.
				</p>
			</subsection>
			<subsection>
				<title>Generating a Table of Contents</title>
				<p>
					<idxterm><item>table of contents</item></idxterm>
					<idxterm group="ecml"><item>make-toc</item></idxterm>

					In previous versions of ecromedos the generation of the table of contents
				(TOC) was controlled by setting the root element's <tt><b>tocdepth</b></tt>
				attribute appropriately. Starting with version 2.0, there is a new language
				element	<tt><b>make-toc</b></tt> for that purpose, which should be inserted
				right after	the document header.
				</p>
				<p>
					<idxterm group="ecml"><item>make-toc</item><subitem>depth</subitem></idxterm>
					<idxterm group="ecml"><item>make-toc</item><subitem>lof</subitem></idxterm>
					<idxterm group="ecml"><item>make-toc</item><subitem>lot</subitem></idxterm>
					<idxterm group="ecml"><item>make-toc</item><subitem>lol</subitem></idxterm>

					By setting the element's <tt><b>depth</b></tt> attribute to an integer
				value between 0 and 5, you determine the deepest section level that will be
				included in the TOC. In addition, you may set either of the attributes
				<tt><b>lof</b></tt>, <tt><b>lot</b></tt>, <tt><b>lol</b></tt> to
				<tt>yes</tt> or <tt>no</tt>, to toggle whether the TOC should contain a <qq>List
				of Figures</qq>, <qq>List of Tables</qq> or <qq>List of Listings</qq>,
				respectively.
				</p>
			</subsection>
			<subsection>
				<title>Options Specific to Printable Output</title>
				<p>
					<idxterm group="ecml"><item>article</item><subitem>papersize</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>papersize</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>papersize</subitem></idxterm>
					<idxterm group="ecml"><item>article</item><subitem>bcor</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>bcor</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>bcor</subitem></idxterm>
					<idxterm group="ecml"><item>article</item><subitem>div</subitem></idxterm>
					<idxterm group="ecml"><item>book</item><subitem>div</subitem></idxterm>
					<idxterm group="ecml"><item>report</item><subitem>div</subitem></idxterm>

					The attributes <tt><b>papersize</b></tt>, <tt><b>bcor</b></tt> and
				<tt><b>div</b></tt>, which may be set on the document's root element, are passed
				through to &latex; and influence how your document is rendered when producing
				Postscript and PDF.
				</p>
				<p>
					<idxterm><item>papersize</item></idxterm>

					The purpose of the <tt><b>papersize</b></tt> attribute should be pretty
				obvious. Supported values are <tt>legalpaper</tt>, <tt>letterpaper</tt>,
				<tt>executivepaper</tt>, <tt>a<i>X</i>paper</tt>, <tt>b<i>X</i>paper</tt>,
				<tt>c<i>X</i>paper</tt>, <tt>d<i>X</i>paper</tt>. The default is
				<tt>a4paper</tt> which is the standard office paper format used in Germany. You
				can activate landscreen mode by adding the keyword <tt>landscape</tt> separated
				with a comma.
				</p>
				<p>
				The <tt><b>bcor</b></tt> attribute lets you specify a binding correction. That is
				the amount in centimeters (cm) or points (pt) by which the text body should be
				indented to make up for margin space lost when binding the document. For example
				write <tt>bcor="1.5cm"</tt> to get a binding correction of 1.5 centimeters.
				</p>
				<p>
					<idxterm><item>KOMA Script</item></idxterm>

				The <tt><b>div</b></tt> attribute indirectly controls the dimensions of the text
				body. Its argument is passed through to the &latex; macro package KOMA-Script
				which is responsible for layouting the document. KOMA-Script tries to
				automatically determine	the optimal dimensions for the text body by applying a
				set of typographic rules. To this end, the page is divided into <m>div\ x\ div</m>
				rectangles of equal size, which serve as the basic units for splitting the page
				into margins and text body. The greater you choose <tt><b>div</b></tt>, the
				larger the text area will be. Try values between eight and 16.
				</p>
			</subsection>
		</section>
	</chapter>

